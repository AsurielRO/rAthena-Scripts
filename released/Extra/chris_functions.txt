//===== rAthena Script =======================================
//= Pagination & Mob per Map and getmobdrops Functions
//===== Author ===============================================
//= llchrisll
//===== Credits ==============================================
//= None
//===== Current Version ======================================
//= 1.0
//===== Changelog ============================================
//= 1.0 - Initial Release
//===== Compatible With ======================================
//= rAthena SQL 09/26-2015 Revision and later
//===== Tested With ==========================================
//= rAthena SQL 09/26-2015 Revision
//===== Description ==========================================
//= F_Pages handles an Pagination for you menus, in case you have lots of entries
//= F_GetMobData + mob_map_db are taken from my Dungeon Quest Service
//  In the mob_map_db is every Mob ID in each Dungeon Map except Instances
//  The function itself can retrieve these Mob ID's and give you an menu based on the Maps
//  you put in the array.
//  Like you can create an array which holds lots of Map Names, then call this function and
//  get every Mob ID of these Maps
//  It's also possible to get every Item Drop of each Mob with their drop chance, if requested
//  But for that I used my F_Pages already to prevent the String Limitation error
//===== Comments =============================================
//= For the F_GetMobData Function to work you need the mob_map_db.sql installed
//===== ToDO =============================================
//= ...
//============================================================
// Function for Pagination
// Preventing string limitation error for menus
//
// *getarg(0) = Array Content for the Menu Selection
//  You can save everything into the array, like Color Codes, Symbols like "( )"
//  ex.: [0] = "- Mob ID (Map)"
// *getarg(1) = Max Entries per Page
//
// ex.: set .@c,callfunc("F_Pages",implode(<Array Name$>,":"),<Max. Entries per Page >);
// The return value is the @menu value
function	script	F_Pages	{

	explode(.@pg_array$,getarg(0),":"); // Re-Saving string into Array
	set .@pg_count,getarraysize(.@pg_array$)/getarg(1); // Calculating max pages based on getarg(1)
	if(!.@pg_count) 
		set .@pg_count,1;

	set .@cur_pg,1;
	
	while(1) {
		if(.@cur_pg == 1) 
			set .@p,0;
		else
			set .@p,.@c+(getarg(1)*(.@cur_pg-1));
			
		if(.@cur_pg > 1 && .@cur_pg < .@pg_count) {
			set .@q_pg$,":- Next Page:- Previous Page";
			set .@pg_opt,2;
		} else if(.@cur_pg > 1 && .@cur_pg == .@pg_count) {
			set .@q_pg$,":- Previous Page";
			set .@pg_opt,3;
		} else if(.@cur_pg == 1 && .@cur_pg < .@pg_count) {
			set .@q_pg$,":- Next Page";
			set .@pg_opt,1;
		} else { // Only when there are not more than getarg(1) entries
			set .@q_pg$,"";
			set .@pg_opt,0;
		}
		set .@pg_m$,"";
		set .@e_ct,0;
		for ( set .@q,.@p; .@q < getarraysize(.@pg_array$); set .@q,.@q + 1) {
			if((.@q+1)%getarg(1) == 0) break;
			set .@pg_m$,.@pg_m$ + .@pg_array$[.@q] + ( (.@pg_array$[.@q+1] != "")?":":"");
			set .@e_ct,.@e_ct + 1;
		}

		set .@pg_m$,.@pg_m$ + .@q_pg$;
		set .@c,select(.@pg_m$) - 1;
		if((.@c*.@cur_pg)/.@e_ct > 0) {
			switch(.@pg_opt) {
				case 1: set .@cur_pg,.@cur_pg + 1; break;
				case 2:
				if(.@c%.@e_ct == 1)
					set .@cur_pg,.@cur_pg + 1;
				else if(.@c%.@e_ct == 2)
					set .@cur_pg,.@cur_pg - 1;
				break;
				case 3: set .@cur_pg,.@cur_pg - 1; break;
			}
			continue;
		} else 
			break;
	}
return .@c;
}
// Function to retrieve the Mob ID's or Item ID's from the SQL Database
// Usage:
// setarray .@array, < Map names >;
// For Mob ID:
// set .@id,F_GetMobData(implode(.@array$,":"));
// For Item Drop:
// set .@id,F_GetMobData(implode(.@array$,":"),1);
function	script	F_GetMobData	{
// getarg(0): Map Array
// getarg(1): 0 = Mob ID, 1 = Item Drops
if(query_sql("SHOW TABLES LIKE 'mob_map_db'",.@db) == 0) {
	debugmes "F_GetMobData Function Error: SQL Table not loaded.";
	return 0;
}	
explode(.@maps$,getarg(0),":");
freeloop(1);
for( set.@o,0; .@o < getarraysize(.@maps$); set .@o,.@o + 1) {
	query_sql "SELECT `mob_id` FROM `mob_map_db` WHERE `map`  = '"+.@maps$[.@o]+"'",.@mob_id;
	
	if(getarraysize(.@mob_id) < 1)
		return -1;
		
	for( set .@n,0; .@n < getarraysize(.@mob_id); set .@n,.@n +1) {
		set .@c,0;
		set .@f,0;
		while( .@c < getarraysize(.@mobid) ) {
			if(.@mob_id[.@n] == .@mobid[.@c]) 
				set .@f,1;

			set .@c,.@c + 1;
		}
		if(.@f) 
			continue;
		else 
			setarray .@mobid[getarraysize(.@mobid)],.@mob_id[.@n];
	}
}
if(getarg(1,0) == 0) {
	for ( set .@n,0; .@n < getarraysize(.@mobid); set .@n,.@n +1)
		set .@menu$,.@menu$ + "- "+strmobinfo(1,.@mobid[.@n]) + ((.@mobid[.@n+1] != 0)?":":"");

	set .@m,select(.@menu$) - 1;

	return .@mobid[.@m];
	
} else if(getarg(1,0) == 1) {
	for ( set .@n,0; .@n < getarraysize(.@mobid); set .@n,.@n +1) {
		getmobdrops(.@mobid[.@n]);
		
		for ( set .@i,0; .@i < $@MobDrop_count; set .@i,.@i +1) {
			set .@c,0;
			set .@f,0;
			while( .@c < getarraysize(.@mobitem) ) {
				if($@MobDrop_item[.@i] == .@mobitem[.@c]) 
					set .@f,1;

				set .@c,.@c + 1;
			}
			if(.@f) 
				continue;
			else {
				setarray .@mobitem[getarraysize(.@mobitem)],$@MobDrop_item[.@i];
				setarray .@mobrate[getarraysize(.@mobrate)],$@MobDrop_rate[.@i];
			}
		}
	}
	for ( set .@n,0; .@n < getarraysize(.@mobitem); set .@n,.@n +1)
		setarray .@page$[getarraysize(.@page$)],"- "+getitemname(.@mobitem[.@n])+" ("+ .@mobrate[.@n]/100 + ((.@mobrate[.@n]%100 < 10) ? ".0":".") + .@mobrate[.@n]%100 + "%)";
	
	set .@m,callfunc("F_Pages",implode(.@page$,":"),20);
	
	freeloop(0);
	return .@mobitem[.@m];
}
freeloop(0);
debugmes "F_GetMobData Function Error!";
return 0;
}